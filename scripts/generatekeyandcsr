#! /usr/bin/env python


"""Generate Bulk keys and CSR's
__version__ = '0.1'
__author__ = 'Stuart Wilson'
Script to generate batch of keys and csr's based on a request file as input:
"""

import fileinput
import os
import logging.config
import argparse

from pykeytool.pykeytool import generate_offline_keyandcsr

# TODO: Fix the base dir as this will be installed into site-packages
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Set Logging to file - logs/pykeytool.log:
logging.config.fileConfig(os.path.join(BASE_DIR, 'config', 'logging.ini'), disable_existing_loggers=False)
logger = logging.getLogger(__name__)


if __name__ == '__main__':

    parser = argparse.ArgumentParser(description='Generate Keys and CSRs')

    parser.add_argument('-pkcs12pw', dest='pkcs12password', action='store', required=True,
                        help='Password used to protect PKCS12 files')

    parser.add_argument('-r', dest='requestfile', action='store', help='Request file to be processed', required=True)

    args = parser.parse_args()

    # Identify the directory to write the output to.
    requestdir = os.path.dirname(os.path.abspath(args.requestfile))
    logger.info('########### Starting Batch Key/CSR Generation ###########')
    logger.info('Reading Batch file from: %s', args.requestfile)
    f_input = fileinput.input(files=args.requestfile)
    count = len(open(args.requestfile).readlines())
    # Iterate over id's listed in file
    for lineno, id in enumerate(f_input, 1):
        # Strip off newline chars
        id = id.strip()
        # Generate offline
        name = {"CN": id, "OU": "OEM 5G ICL", "O": "Verizon Wireless", "C": "US"}
        logger.info('Generating Key and CSR for %s', name)
        generate_offline_keyandcsr(id, args.pkcs12password, requestdir, digest="sha256", **name)
        logger.info('Processed Request Number: %s out of %s', lineno, count)
    f_input.close()
    logger.info('########### Finished Batch Key/CSR Generation ###########')